CREATE SEQUENCE member_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE activity_info_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE activity_review_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE favorite_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE reservation_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE reservation_status_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE rec_activity_info_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE notice_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE rec_town_info_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE faq_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE region_sido_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE rec_activity_keyword_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE notice_type_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE region_town_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE inquiry_type_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE region_sigungu_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE activity_images_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE seller_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE post_type_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE admin_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE member_type_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE activity_post_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE rec_images_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE rec_town_images_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE inquiry_status_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE event_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE event_images_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE member_community_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE seller_community_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE payment_info_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE payment_status_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE behavior_info_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE report_status_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE account_info_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE notice_images_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE community_post_img_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE faq_type_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE event_recruitment_type_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE activity_theme_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE member_list_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE board_list_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE admin_authority_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE inquiry_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
CREATE SEQUENCE event_winner_seq INCREMENT BY 1
   MINVALUE 0
   NOMAXVALUE
   START WITH 0
   NOCACHE
   NOCYCLE;
CREATE SEQUENCE event_status_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
    
CREATE SEQUENCE post_likes_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
    
CREATE SEQUENCE activity_customer_seq INCREMENT BY 1
   MINVALUE 0
   NOMAXVALUE
   START WITH 0
   NOCACHE
   NOCYCLE;
CREATE SEQUENCE town_report_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE town_report_images_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;
    
CREATE SEQUENCE event_progress_status_seq INCREMENT BY 1
    MINVALUE 0
    NOMAXVALUE
    START WITH 0
    NOCACHE
    NOCYCLE;

-- 0          ϴ  Ʈ     +    ν   
/*
-- ü                ̺       + Ʈ        
CREATE OR REPLACE PROCEDURE activity_customer_create(act_info_id IN NUMBER)
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
	sql1 VARCHAR2(500);
	sql2 VARCHAR2(500);
BEGIN
    sql1 := 'CREATE TABLE activity_customer_' || act_info_id || '(a_customer_id NUMBER NOT NULL PRIMARY KEY, a_id NUMBER DEFAULT ' ||  act_info_id || ' NOT NULL, u_id NUMBER NOT NULL)';
	EXECUTE IMMEDIATE sql1;
    sql2 := 'CREATE SEQUENCE activity_customer_' || act_info_id || '_seq INCREMENT BY 1 MINVALUE 0 NOMAXVALUE START WITH 0 NOCACHE NOCYCLE';
	EXECUTE IMMEDIATE sql2;
END;
/
CREATE OR REPLACE TRIGGER JAVAJO.trg_activity_customer_create
AFTER INSERT ON activity_info
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		activity_customer_create(:NEW.a_id);
	END IF;
END;
/
--CREATE OR REPLACE TRIGGER JAVAJO.trg_activity_customer_create
--AFTER INSERT ON activity_post
--FOR EACH ROW
--DECLARE
--    sql1 VARCHAR2(500);
--    sql2 VARCHAR2(500);
--BEGIN
--    sql1 := 'CREATE TABLE activity_customer_' || :NEW.a_post_id || '(a_customer_id NUMBER NOT NULL PRIMARY KEY, a_post_id NUMBER DEFAULT ' || :NEW.a_post_id || ' NOT NULL, u_id NUMBER NOT NULL)';
--    sql2 := 'CREATE SEQUENCE activity_customer_' || :NEW.a_post_id || '_seq INCREMENT BY 1 MINVALUE 1 NOMAXVALUE START WITH 1 NOCACHE NOCYCLE';
--	IF INSERTING THEN
--		EXECUTE IMMEDIATE sql1;
--        EXECUTE IMMEDIATE sql2;
--	END IF;
--END;
--/

CREATE OR REPLACE PROCEDURE activity_customer_drop(act_info_id IN NUMBER)
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
	sql1 VARCHAR2(500);
    sql2 VARCHAR2(500);
BEGIN
    sql1 := 'DROP TABLE activity_customer_' || act_info_id;
	EXECUTE IMMEDIATE sql1;
	sql2 := 'DROP SEQUENCE activity_customer_' || act_info_id || '_seq';
	EXECUTE IMMEDIATE sql2;
END;
/
CREATE OR REPLACE TRIGGER JAVAJO.trg_activity_customer_drop
AFTER DELETE ON activity_info
FOR EACH ROW
BEGIN
	IF DELETING THEN
		activity_customer_drop(:OLD.a_id);
	END IF;
END;
/
--CREATE OR REPLACE TRIGGER JAVAJO.trg_activity_customer_drop
--AFTER DELETE ON activity_post
--FOR EACH ROW
--DECLARE
--    sql1 VARCHAR2(500);
--    sql2 VARCHAR2(500);
--BEGIN
--    sql1 := 'DROP TABLE activity_customer_' || :OLD.a_post_id;
--    sql2 := 'DROP SEQUENCE activity_customer_' || :OLD.a_post_id || '_seq';
--	IF DELETING THEN
--		EXECUTE IMMEDIATE sql1;
--        EXECUTE IMMEDIATE sql2;
--	END IF;
--END;
--/

--  ̺ Ʈ           ̺       + Ʈ        
CREATE OR REPLACE PROCEDURE event_winner_create(e_id IN NUMBER)
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
    e_status NUMBER;
	sql1 VARCHAR2(500);
	sql2 VARCHAR2(500);
BEGIN
    BEGIN
        SELECT event_status_id INTO e_status FROM event WHERE event_id = e_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN e_status := 0;
    END;
    IF (e_status = 3) THEN
        sql1 := 'CREATE TABLE event_winner_' || e_id || '(event_report_id NUMBER NOT NULL PRIMARY KEY, u_id NUMBER NOT NULL, event_id NUMBER DEFAULT ' || e_id || ' NOT NULL, event_progress_status_id NUMBER NOT NULL, event_story CLOB NULL)';
        EXECUTE IMMEDIATE sql1;
        sql2 := 'CREATE SEQUENCE event_winner_' || e_id || '_seq INCREMENT BY 1 MINVALUE 0 NOMAXVALUE START WITH 0 NOCACHE NOCYCLE';
        EXECUTE IMMEDIATE sql2;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER JAVAJO.trg_event_winner_create_insert
AFTER INSERT ON event
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		event_winner_create(:NEW.event_id);
	END IF;
END;
/
CREATE OR REPLACE TRIGGER JAVAJO.trg_event_winner_create_update
AFTER UPDATE ON event
FOR EACH ROW
BEGIN
	IF UPDATING THEN
		event_winner_create(:NEW.event_id);
	END IF;
END;
/
--CREATE OR REPLACE TRIGGER JAVAJO.trg_event_winner_create
--AFTER INSERT ON event
--FOR EACH ROW
--DECLARE
--    sql1 VARCHAR2(500);
--    sql2 VARCHAR2(500);
--BEGIN
--    sql1 := 'CREATE TABLE event_winner_' || :NEW.event_id || '(event_report_id NUMBER NOT NULL PRIMARY KEY, u_id NUMBER NOT NULL, event_id NUMBER DEFAULT ' || :NEW.event_id || ' NOT NULL, event_progress_status_id NUMBER NOT NULL, event_story CLOB NULL)';
--    sql2 := 'CREATE SEQUENCE event_winner_' || :NEW.event_id || '_seq INCREMENT BY 1 MINVALUE 1 NOMAXVALUE START WITH 1 NOCACHE NOCYCLE';
--	IF INSERTING THEN
--		EXECUTE IMMEDIATE sql1;
--        EXECUTE IMMEDIATE sql2;
--	END IF;
--END;
--/
CREATE OR REPLACE PROCEDURE event_winner_drop(e_id IN NUMBER)
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
	sql1 VARCHAR2(500);
	sql2 VARCHAR2(500);
BEGIN
	sql1 := 'DROP TABLE event_winner_' || e_id;
	EXECUTE IMMEDIATE sql1;
	sql2 := 'DROP SEQUENCE event_winner_' || e_id || '_seq';
	EXECUTE IMMEDIATE sql2;
END;
/
CREATE OR REPLACE TRIGGER JAVAJO.trg_event_winner_drop
AFTER DELETE ON event
FOR EACH ROW
BEGIN
	IF DELETING THEN
		event_winner_drop(:OLD.event_id);
	END IF;
END;
/
--CREATE OR REPLACE TRIGGER JAVAJO.trg_event_winner_drop
--AFTER DELETE ON event
--FOR EACH ROW
--DECLARE
--    sql1 VARCHAR2(500);
--    sql2 VARCHAR2(500);
--BEGIN
--    sql1 := 'DROP TABLE event_winner_' || :OLD.event_id;
--    sql2 := 'DROP SEQUENCE event_winner_' || :OLD.event_id || '_seq';
--	IF DELETING THEN
--		EXECUTE IMMEDIATE sql1;
--        EXECUTE IMMEDIATE sql2;
--	END IF;
--END;
--/
*/